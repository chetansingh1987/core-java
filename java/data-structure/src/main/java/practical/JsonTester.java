package practical;

import com.google.gson.Gson;

import java.util.HashMap;

public class JsonTester {

    public static void main(String[] args) {
        String s  = "{\"template\":{\\\"heat_template_version\\\":\\\"2016-10-14\\\",\\\"parameters\\\":{\\\"vim-id\\\":{\\\"type\\\":\\\"string\\\",\\\"default\\\":\\\"{{cloud-owner}}_{{region-id}}\\\"},\\\"flavor\\\":{\\\"type\\\":\\\"string\\\",\\\"description\\\":\\\"I am using the smallest flavor available because i'll be spinning up a cirros instance. You can use an environment file to override the defaults.\\\",\\\"default\\\":\\\"m1.tiny\\\",\\\"constraints\\\":[{\\\"custom_constraint\\\":\\\"nova.flavor\\\"}]},\\\"image\\\":{\\\"type\\\":\\\"string\\\",\\\"description\\\":\\\"This uses a cirros image but you can create an environment file to change the default values.\\\",\\\"default\\\":\\\"cirros-0.5.2-x86_64-disk\\\",\\\"constraints\\\":[{\\\"custom_constraint\\\":\\\"glance.image\\\"}]},\\\"heat_volume_size\\\":{\\\"type\\\":\\\"number\\\",\\\"label\\\":\\\"Volume Size (GB)\\\",\\\"description\\\":\\\"External Volume Size in GB\\\",\\\"default\\\":1}},\\\"resources\\\":{\\\"heat_volume\\\":{\\\"type\\\":\\\"OS::Cinder::Volume\\\",\\\"properties\\\":{\\\"size\\\":{\\\"get_param\\\":\\\"heat_volume_size\\\"}}},\\\"heat_volume_attachment\\\":{\\\"type\\\":\\\"OS::Cinder::VolumeAttachment\\\",\\\"properties\\\":{\\\"volume_id\\\":{\\\"get_resource\\\":\\\"heat_volume\\\"},\\\"instance_uuid\\\":{\\\"get_resource\\\":\\\"heat_server\\\"}}},\\\"heat_network\\\":{\\\"type\\\":\\\"OS::Neutron::Net\\\",\\\"properties\\\":{\\\"admin_state_up\\\":true,\\\"name\\\":\\\"heat_network\\\"}},\\\"heat_network_subnet\\\":{\\\"type\\\":\\\"OS::Neutron::Subnet\\\",\\\"properties\\\":{\\\"network\\\":{\\\"get_resource\\\":\\\"heat_network\\\"},\\\"cidr\\\":\\\"10.1.1.0\\/24\\\",\\\"dns_nameservers\\\":[\\\"8.8.8.8\\\"],\\\"gateway_ip\\\":\\\"10.1.1.1\\\",\\\"ip_version\\\":4}},\\\"heat_router\\\":{\\\"type\\\":\\\"OS::Neutron::Router\\\",\\\"properties\\\":{\\\"external_gateway_info\\\":{\\\"network\\\":\\\"public\\\"},\\\"name\\\":\\\"heat_router\\\"}},\\\"heat_router_interface\\\":{\\\"type\\\":\\\"OS::Neutron::RouterInterface\\\",\\\"properties\\\":{\\\"router_id\\\":{\\\"get_resource\\\":\\\"heat_router\\\"},\\\"subnet\\\":{\\\"get_resource\\\":\\\"heat_network_subnet\\\"}}},\\\"heat_server_port\\\":{\\\"type\\\":\\\"OS::Neutron::Port\\\",\\\"properties\\\":{\\\"network\\\":{\\\"get_resource\\\":\\\"heat_network\\\"},\\\"fixed_ips\\\":[{\\\"subnet_id\\\":{\\\"get_resource\\\":\\\"heat_network_subnet\\\"}}]}},\\\"heat_server\\\":{\\\"type\\\":\\\"OS::Nova::Server\\\",\\\"properties\\\":{\\\"name\\\":\\\"heat_server\\\",\\\"flavor\\\":{\\\"get_param\\\":\\\"flavor\\\"},\\\"image\\\":{\\\"get_param\\\":\\\"image\\\"},\\\"networks\\\":[{\\\"port\\\":{\\\"get_resource\\\":\\\"heat_server_port\\\"}}]}},\\\"heat_server_public_ip\\\":{\\\"type\\\":\\\"OS::Neutron::FloatingIP\\\",\\\"properties\\\":{\\\"floating_network\\\":\\\"public\\\"}},\\\"heat_server_ip_assoc\\\":{\\\"type\\\":\\\"OS::Neutron::FloatingIPAssociation\\\",\\\"properties\\\":{\\\"floatingip_id\\\":{\\\"get_resource\\\":\\\"heat_server_public_ip\\\"},\\\"port_id\\\":{\\\"get_resource\\\":\\\"heat_server_port\\\"}}}},\\\"outputs\\\":{\\\"heat_server_public_ip\\\":{\\\"description\\\":\\\"IP Address of the deployed heat_server instance\\\",\\\"value\\\":{\\\"get_attr\\\":[\\\"heat_server_public_ip\\\",\\\"floating_ip_address\\\"]}}}},\\\"timeout_mins\\\":60}";
        Gson g = new Gson();
        Object hashMap = g.fromJson(s, Object.class);
        System.out.println(hashMap );
    }
}
